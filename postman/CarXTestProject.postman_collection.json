{
  "info": {
    "_postman_id": "7dc785fc-fc40-488a-b5ba-d45ab0ea6a93",
    "name": "CarXTestProject",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "253693"
  },
  "item": [
    {
      "name": "Active",
      "item": [
        {
          "name": "createActivityDataOk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist;\r",
                  "    pm.expect(responseData.userUuid).to.exist;\r",
                  "    pm.expect(responseData.createActivity).to.exist;\r",
                  "    pm.expect(responseData.activity).to.exist;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"activity\": \"100L\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/api/v1/users/123e4567-e89b-12d3-a456-426652340000/activity/1000",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "users",
                "123e4567-e89b-12d3-a456-426652340000",
                "activity",
                "1000"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createActivityDataFailNegativeCount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Response has the required fields - timestamp, status, error, and path\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.timestamp).to.exist;\r",
                  "    pm.expect(responseData.status).to.exist;\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "    pm.expect(responseData.path).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"activity\": \"100L\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/api/v1/users/123e4567-e89b-12d3-a456-426652340000/activity/-1000",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "users",
                "123e4567-e89b-12d3-a456-426652340000",
                "activity",
                "-1000"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createActivityDataFailCount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields - timestamp, status, error, and path\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.timestamp).to.exist;\r",
                  "    pm.expect(responseData.status).to.exist;\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "    pm.expect(responseData.path).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"activity\": \"100L\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/api/v1/users/123e4567-e89b-12d3-a456-426652340000/activity/1000k",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "users",
                "123e4567-e89b-12d3-a456-426652340000",
                "activity",
                "1000k"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sync",
      "item": [
        {
          "name": "createSyncOk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"money\": \"1000\",\r\n  \"country\" : \"RU\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/api/v1/sync/123e4567-e89b-12d3-a456-426652340000",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "sync",
                "123e4567-e89b-12d3-a456-426652340000"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getSuncData",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields - id, money, and country\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.have.property('id');\r",
                  "    pm.expect(responseData).to.have.property('money');\r",
                  "    pm.expect(responseData).to.have.property('country');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Money is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData.money).to.exist.and.to.be.a('number');\r",
                  "    pm.expect(responseData.money).to.be.at.least(0);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"activity\": \"100L\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/api/v1/sync/123e4567-e89b-12d3-a456-426652340000",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "sync",
                "123e4567-e89b-12d3-a456-426652340000"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Stat",
      "item": [
        {
          "name": "Top10",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type header is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields - uuid, money, and country\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
                  "    responseData.forEach(function(item) {\r",
                  "        pm.expect(item).to.have.property('id');\r",
                  "        pm.expect(item).to.have.property('money');\r",
                  "        pm.expect(item).to.have.property('country');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Money is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    responseData.forEach(function(item) {\r",
                  "        pm.expect(item.money).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api/v1/stat/top/RU/10",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "stat",
                "top",
                "RU",
                "10"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ActivityOk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields - activity and createActivity\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function(item) {\r",
                  "        pm.expect(item).to.be.an('object');\r",
                  "        pm.expect(item).to.have.property('activity');\r",
                  "        pm.expect(item).to.have.property('createActivity');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Activity is a non-negative integer\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  responseData.forEach(function(item) {\r",
                  "    pm.expect(item.activity).to.be.a('number').and.to.be.at.least(0);\r",
                  "  });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"CreateActivity is a non-empty string\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  responseData.forEach(function(item) {\r",
                  "    pm.expect(item.createActivity).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "  });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api/v1/stat/activity/123e4567-e89b-12d3-a456-426652340000/2024-12-12/2025-02-16",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "stat",
                "activity",
                "123e4567-e89b-12d3-a456-426652340000",
                "2024-12-12",
                "2025-02-16"
              ]
            }
          },
          "response": []
        },
        {
          "name": "NewUserOk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api/v1/stat/new-user/2024-12-12/2025-01-01",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "stat",
                "new-user",
                "2024-12-12",
                "2025-01-01"
              ]
            }
          },
          "response": []
        },
        {
          "name": "NewUserDateFail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response content type is text/plain\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response body contains the error message 'End date cannot be before start date.'\", function () {\r",
                  "    const responseData = pm.response.text();\r",
                  "    \r",
                  "    pm.expect(responseData).to.include(\"End date cannot be before start date.\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api/v1/stat/new-user/2025-01-01/2024-12-12",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "stat",
                "new-user",
                "2025-01-01",
                "2024-12-12"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Top10CountPositiveFail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields - timestamp, status, error, and path\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.timestamp).to.exist;\r",
                  "    pm.expect(responseData.status).to.exist;\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "    pm.expect(responseData.path).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within an acceptable range\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api/v1/stat/top/RU/-10",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "api",
                "v1",
                "stat",
                "top",
                "RU",
                "-10"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}